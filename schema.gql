# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MainGraphQLModel {
  id: String
  name: String!
  description: String
}

"""Users list"""
type UsersGraphQLListModel {
  list: [UserGraphQLModel!]!
  totalCount: Float!
}

"""User"""
type UserGraphQLModel {
  email: String!

  """Only for Admin"""
  role: String
}

"""auth"""
type AuthTokenGraphQLModel {
  access_token: String
}

"""country"""
type CountryGraphQLModel {
  id: String
  name: String!
  description: String
}

"""Countries list"""
type CountriesGraphQLListModel {
  list: [CountryGraphQLModel!]!
  totalCount: Float!
}

"""region"""
type RegionGraphQLModel {
  id: String
  name: String!
  description: String
  countryId: String
  country: String
}

"""Regions list"""
type RegionsGraphQLListModel {
  list: [RegionGraphQLModel!]!
  totalCount: Float!
}

"""Distillery"""
type DistilleryGraphQLModel {
  id: String
  name: String!
  description: String
  countryId: String
  country: String
  regionId: String
  region: String
}

"""Distillery & Children"""
type DistilleryChildrenGraphQLModel {
  id: String
  name: String!
  description: String
  countryId: String
  country: String
  regionId: String
  region: String
  children: [MainGraphQLModel!]!
}

"""Distilleries list"""
type DistilleriesGraphQLListModel {
  list: [DistilleryGraphQLModel!]!
  totalCount: Float!
}

"""file"""
type FileGraphQLModel {
  _id: String
  originFileName: String
  originFilePath: String
  webpFilePath: String
  originFileSize: Float
  mimetype: String
  ownerName: String
}

"""Upload file"""
type FilesGraphQLUploadModel {
  _id: String
  originFileName: String
  originFilePath: String
  webpFilePath: String
  originFileSize: Float
  mimetype: String
  ownerName: String
  message: String
}

"""File list"""
type FilesGraphQLListModel {
  list: [FileGraphQLModel!]!
  totalCount: Float!
}

"""Whisky"""
type WhiskyGraphQLModel {
  id: String
  name: String!
  description: String
  countryId: String
  country: String
  regionId: String
  region: String
  age: Float
  distilleryId: String
  distillery: String
}

"""Whiskies list"""
type WhiskiesGraphQLListModel {
  list: [WhiskyGraphQLModel!]!
  totalCount: Float!
}

"""Pages tree list"""
type PagesTreeGraphQLModel {
  countries: [PageTreeCountryGraphQLModel!]!
}

type PageTreeCountryGraphQLModel {
  id: String
  name: String!
  description: String
  regions: [PageTreeRegionGraphQLModel!]!
}

type PageTreeRegionGraphQLModel {
  id: String
  name: String!
  description: String
  distilleries: [PageTreeDistilleryGraphQLModel!]!
}

type PageTreeDistilleryGraphQLModel {
  id: String
  name: String!
  description: String
  whiskies: [PageWhiskyGraphQLModel!]!
}

type PageWhiskyGraphQLModel {
  id: String
  name: String!
  description: String
}

type PageGraphQLModel {
  id: String
  name: String!
  description: String
}

type Query {
  countriesList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "name", sortOrder: Int = 1): CountriesGraphQLListModel!
  getDistillery(id: String!): DistilleryChildrenGraphQLModel!
  distilleriesList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "name", sortOrder: Int = 1): DistilleriesGraphQLListModel!

  """Only for users with admin rights!"""
  pictureList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "originFileName", sortOrder: Int = 1): FilesGraphQLListModel!
  pagesList: [PageGraphQLModel!]!
  pagesListTree: PagesTreeGraphQLModel!
  getWhisky(id: String!): WhiskyGraphQLModel!
  whiskyList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "name", sortOrder: Int = 1): WhiskiesGraphQLListModel!
  regionsList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "name", sortOrder: Int = 1): RegionsGraphQLListModel!

  """Only for registered users!"""
  usersList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "email", sortOrder: Int = 1): UsersGraphQLListModel!
}

type Mutation {
  login(data: Login!): AuthTokenGraphQLModel!

  """Only for users with admin rights!"""
  addCountry(data: NewCountryInput!): CountryGraphQLModel!

  """Only for users with admin rights!"""
  addDistillery(data: NewDistilleryInput!): DistilleryGraphQLModel!

  """Only for registered users!"""
  uploadPicture(file: Upload!): FilesGraphQLUploadModel!
  addWhisky(data: NewWhiskyInput!): WhiskyGraphQLModel!

  """Only for users with admin rights!"""
  addRegion(data: NewRegionInput!): RegionGraphQLModel!

  """Only for users with admin rights!"""
  addUser(data: AddUserInput!): UserGraphQLModel!

  """Only for users with admin rights!"""
  deleteUserByEmail(email: String!): UserGraphQLModel!
}

input Login {
  email: String!
  password: String!
}

input NewCountryInput {
  name: String!
  description: String
}

input NewDistilleryInput {
  name: String!
  description: String
  countryId: String
  country: String
  regionId: String
  region: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input NewWhiskyInput {
  name: String!
  description: String
  countryId: String
  country: String
  regionId: String
  region: String
  age: Float
  creationDate: DateTime
  distilleryId: String
  distillery: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input NewRegionInput {
  name: String!
  description: String
  countryId: String
  country: String
}

input AddUserInput {
  email: String!
  password: String!
}

type Subscription {
  countryAdded: CountryGraphQLModel!
  distilleryAdded: DistilleryGraphQLModel!
  whiskyAdded: WhiskyGraphQLModel!
  regionAdded: RegionGraphQLModel!

  """Only for registered users!"""
  userAdded: UserGraphQLModel!
}
