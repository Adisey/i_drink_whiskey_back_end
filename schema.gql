# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MainGraphQLModel {
  _id: String
  name: String!
  description: String
}

"""Users list"""
type UsersGraphQLListModel {
  list: [UserGraphQLModel!]!
  totalCount: Float!
}

"""User"""
type UserGraphQLModel {
  email: String!

  """Only for Admin"""
  role: String
}

"""auth"""
type AuthTokenGraphQLModel {
  access_token: String
}

"""country"""
type CountryGraphQLModel {
  _id: String
  name: String!
  description: String
}

"""Countries list"""
type CountriesGraphQLListModel {
  list: [CountryGraphQLModel!]!
  totalCount: Float!
}

"""file"""
type FileGraphQLModel {
  _id: String
  originFileName: String
  originFilePath: String
  webpFilePath: String
  originFileSize: Float
  mimetype: String
  ownerName: String
}

"""Upload file"""
type FilesGraphQLUploadModel {
  _id: String
  originFileName: String
  originFilePath: String
  webpFilePath: String
  originFileSize: Float
  mimetype: String
  ownerName: String
  message: String
}

"""File list"""
type FilesGraphQLListModel {
  list: [FileGraphQLModel!]!
  totalCount: Float!
}

"""whisky"""
type WhiskyGraphQLModel {
  _id: String
  title: String!
  description: String
  age: Float
}

type Query {
  countriesList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "name", sortOrder: Int = 1): CountriesGraphQLListModel!

  """Only for users with admin rights!"""
  pictureList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "originFileName", sortOrder: Int = 1): FilesGraphQLListModel!

  """Only for registered users!"""
  usersList(pageNumber: Int = 1, pageSize: Int = 5, find: String = "", sortBy: String = "email", sortOrder: Int = 1): UsersGraphQLListModel!
  whiskyList(skip: Int = 0, limit: Int = 25): [WhiskyGraphQLModel!]!
}

type Mutation {
  login(data: Login!): AuthTokenGraphQLModel!

  """Only for users with admin rights!"""
  addCountry(data: NewCountryInput!): CountryGraphQLModel!

  """Only for registered users!"""
  uploadPicture(file: Upload!): FilesGraphQLUploadModel!

  """Only for users with admin rights!"""
  addUser(data: AddUserInput!): UserGraphQLModel!

  """Only for users with admin rights!"""
  deleteUserByEmail(email: String!): UserGraphQLModel!
  addWhisky(data: NewWhiskyInput!): WhiskyGraphQLModel!
}

input Login {
  email: String!
  password: String!
}

input NewCountryInput {
  name: String!
  description: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AddUserInput {
  email: String!
  password: String!
}

input NewWhiskyInput {
  title: String!
  description: String
  age: Float
  creationDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Subscription {
  countryAdded: CountryGraphQLModel!

  """Only for registered users!"""
  userAdded: UserGraphQLModel!
  whiskyAdded: WhiskyGraphQLModel!
}
